from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

from services.bitrix_client import bitrix_client
from services.task_formatter import task_formatter
from config import MAX_TASKS_DISPLAY

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"""
    await message.answer(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –≤ Bitrix24\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/task - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥\n"
        "/projects - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã\n"
        "/users - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/gettasks - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/help - –ü–æ–º–æ—â—å\n\n"
        "üí° <b>–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b>\n"
        "–ù–∞–ø–∏—à–∏ <i>–∑–∞–¥–∞—á–∞</i>, <i>–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏</i> –∏–ª–∏ <i>–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</i> "
        "–∏ –∑–∞—Ç–µ–º —É–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>#1 –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
        "#2 –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
        "#3 ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
        "#4 ID –ø—Ä–æ–µ–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</code>",
        parse_mode="HTML"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>

<b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥:</b>
/task - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

<b>–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b>
–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç:
<code>–∑–∞–¥–∞—á–∞
#1 –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
#2 –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏  
#3 ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
#4 ID –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</code>

<b>–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á:</b>
/gettasks - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–¥–∞—á
/gettasks 5 - –ø–æ–∫–∞–∑–∞—Ç—å 5 –∑–∞–¥–∞—á
/gettasks 1 - –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–æ

<b>–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/projects - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Bitrix24
/users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º!
    """
    await message.answer(help_text, parse_mode="HTML")

@router.message(Command("projects"))
async def cmd_projects(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Bitrix24"""
    await message.answer("üîÑ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Bitrix24...")
    
    projects = bitrix_client.get_projects()
    if projects:
        projects_text = "\n".join([f"üèóÔ∏è <b>{name}</b> (ID: {pid})" for name, pid in projects.items()])
        response = f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:</b>\n\n{projects_text}"
        
        kb = InlineKeyboardMarkup(inline_keyboard=[])
        for name, pid in list(projects.items())[:8]:
            kb.inline_keyboard.append([
                InlineKeyboardButton(text=f"üèóÔ∏è {name[:20]}", callback_data=f"project_info:{pid}")
            ])
        
        await message.answer(response, parse_mode="HTML", reply_markup=kb)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

@router.message(Command("users"))
async def cmd_users(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await message.answer("üîÑ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    users = bitrix_client.get_users()
    if users:
        users_list = "\n".join([
            f"üë§ <b>{user['NAME']} {user.get('LAST_NAME', '')}</b>\n"
            f"   ID: {user['ID']} | Email: {user.get('EMAIL', '–Ω–µ—Ç')}\n"
            for user in users[:10]
        ])
        response = f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Bitrix24:</b>\n\n{users_list}"
        
        if len(users) > 10:
            response += f"\n... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
        await message.answer(response, parse_mode="HTML")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@router.message(Command("gettasks"))
async def cmd_get_tasks(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É"""
    try:
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        
        if args and args[0].isdigit():
            task_count = int(args[0])
            
            if task_count == 1:
                tasks = bitrix_client.get_tasks(limit=1)
                if tasks:
                    task = tasks[0]
                    task_details = bitrix_client.get_task_by_id(task["id"])
                    response = task_formatter.format_task_info(task_details or task, detailed=True)
                else:
                    response = "‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            else:
                tasks = bitrix_client.get_tasks(limit=task_count)
                if tasks:
                    response = f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(tasks)} –∑–∞–¥–∞—á:</b>\n\n"
                    for i, task in enumerate(tasks, 1):
                        response += f"{i}. {task_formatter.format_task_info(task)}\n\n"
                else:
                    response = "‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            tasks = bitrix_client.get_tasks(limit=MAX_TASKS_DISPLAY)
            if tasks:
                response = f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(tasks)} –∑–∞–¥–∞—á:</b>\n\n"
                for i, task in enumerate(tasks, 1):
                    response += f"{i}. {task_formatter.format_task_info(task)}\n\n"
                
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–µ", callback_data="task_detail:first"),
                        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_tasks")
                    ]
                ])
                await message.answer(response, parse_mode="HTML", reply_markup=kb)
                return
            else:
                response = "‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        await message.answer(response, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")

@router.message()
async def handle_unknown_commands(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    if message.text.startswith('/'):
        await message.answer(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n\n"
            "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/help - –ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
            "/task - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n" 
            "/projects - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
            "/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "/gettasks - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "ü§ñ –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bitrix24. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ:\n\n"
            "‚Ä¢ /help - –¥–ª—è –ø–æ–º–æ—â–∏\n"
            "‚Ä¢ /task - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\n"
            "‚Ä¢ /gettasks - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ <i>–∑–∞–¥–∞—á–∞ #1 –ù–∞–∑–≤–∞–Ω–∏–µ #2 –û–ø–∏—Å–∞–Ω–∏–µ #3 ID</i> - –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±",
            parse_mode="HTML"
        )