import re
from aiogram import Router, F
from aiogram.types import Message

from services.bitrix_client import bitrix_client

router = Router()

@router.message(F.text & (
    F.text.contains("–∑–∞–¥–∞—á–∞") | 
    F.text.contains("–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏") | 
    F.text.contains("–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
))
async def quick_task_creation(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    text = message.text.lower().strip()
    
    if any(cmd in text for cmd in ["/task", "/start", "/help"]):
        return
    
    pattern = r'#1\s*(.*?)(?=\s*#2|$)|#2\s*(.*?)(?=\s*#3|$)|#3\s*(\d+)(?=\s*#4|$)|#4\s*(\d+)?'
    matches = re.findall(pattern, text, re.IGNORECASE | re.DOTALL)
    
    if not matches:
        alt_pattern = r'#1\s*([^#]+?)\s+#2\s*([^#]+?)\s+#3\s*(\d+)(?:\s+#4\s*(\d+))?'
        alt_match = re.search(alt_pattern, text, re.IGNORECASE | re.DOTALL)
        if alt_match:
            title = alt_match.group(1).strip()
            description = alt_match.group(2).strip()
            responsible_id = int(alt_match.group(3))
            project_id = int(alt_match.group(4)) if alt_match.group(4) else 0
        else:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏!</b>\n\n"
                "üìù <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b>\n"
                "<code>–∑–∞–¥–∞—á–∞\n"
                "#1 –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
                "#2 –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n" 
                "#3 ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
                "#4 ID –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</code>\n\n"
                "–ò–ª–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É:\n"
                "<code>–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É #1 –ù–∞–∑–≤–∞–Ω–∏–µ #2 –û–ø–∏—Å–∞–Ω–∏–µ #3 123 #4 456</code>",
                parse_mode="HTML"
            )
            return
    else:
        title = ""
        description = ""
        responsible_id = None
        project_id = 0
        
        for match in matches:
            if match[0]:
                title = match[0].strip()
            elif match[1]:
                description = match[1].strip()
            elif match[2]:
                responsible_id = int(match[2])
            elif match[3]:
                project_id = int(match[3])
    
    if not title or not description or responsible_id is None:
        await message.answer(
            "‚ùå <b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö!</b>\n\n"
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:\n"
            "‚Ä¢ #1 –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n" 
            "‚Ä¢ #2 –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ #3 ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n\n"
            "–ü–æ–ª–µ #4 ID –ø—Ä–æ–µ–∫—Ç–∞ - –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ",
            parse_mode="HTML"
        )
        return
    
    group_id = project_id if project_id != 0 else None
    result = bitrix_client.create_task(title, description, responsible_id, group_id)
    
    if result["success"]:
        response = "‚úÖ <b>–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>"
        response += f"\nüìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}"
        response += f"\nüë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {responsible_id}"
        if group_id:
            response += f"\nüèóÔ∏è <b>–ü—Ä–æ–µ–∫—Ç:</b> {group_id}"
        if "task_id" in result:
            response += f"\nüÜî <b>ID –∑–∞–¥–∞—á–∏ –≤ Bitrix:</b> {result['task_id']}"
    else:
        response = f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:</b>\n{result['error']}"
    
    await message.answer(response, parse_mode="HTML")