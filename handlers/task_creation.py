from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from models.states import TaskCreation
from services.bitrix_client import bitrix_client

router = Router()

@router.message(Command("task"))
async def cmd_task_dialog(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    await message.answer(
        "üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>:",
        parse_mode="HTML"
    )
    await state.set_state(TaskCreation.waiting_title)

@router.message(TaskCreation.waiting_title)
async def process_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    await state.update_data(title=message.text)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>:", parse_mode="HTML")
    await state.set_state(TaskCreation.waiting_description)

@router.message(TaskCreation.waiting_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    await state.update_data(description=message.text)
    
    users = bitrix_client.get_users()
    if users:
        users_text = "\n".join([
            f"ID: {u['ID']} - {u['NAME']} {u.get('LAST_NAME', '')}"
            for u in users[:5]
        ])
        await message.answer(
            f"üë• <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–µ—Ä–≤—ã–µ 5):</b>\n{users_text}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ <b>ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>:",
            parse_mode="HTML"
        )
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</b>:", parse_mode="HTML")
    
    await state.set_state(TaskCreation.waiting_responsible)

@router.message(TaskCreation.waiting_responsible)
async def process_responsible(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    try:
        responsible_id = int(message.text)
        await state.update_data(responsible_id=responsible_id)
        
        projects = bitrix_client.get_projects()
        if projects:
            projects_text = "\n".join([
                f"ID: {pid} - {name}" for name, pid in list(projects.items())[:5]
            ])
            await message.answer(
                f"üèóÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã (–ø–µ—Ä–≤—ã–µ 5):</b>\n{projects_text}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ <b>ID –ø—Ä–æ–µ–∫—Ç–∞</b> (–∏–ª–∏ 0 –µ—Å–ª–∏ –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞):",
                parse_mode="HTML"
            )
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>ID –ø—Ä–æ–µ–∫—Ç–∞</b> (–∏–ª–∏ 0 –µ—Å–ª–∏ –±–µ–∑ –ø—Ä–æ–µ–∫—Ç–∞):", parse_mode="HTML")
        
        await state.set_state(TaskCreation.waiting_project)
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")

@router.message(TaskCreation.waiting_project)
async def process_project(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ID –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É"""
    try:
        project_id = int(message.text)
        data = await state.get_data()
        
        group_id = project_id if project_id != 0 else None
        
        result = bitrix_client.create_task(
            title=data["title"],
            description=data["description"],
            responsible_id=data["responsible_id"],
            group_id=group_id
        )
        
        if result["success"]:
            response = "‚úÖ <b>–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>"
            if group_id:
                response += f"\nüèóÔ∏è –ü—Ä–æ–µ–∫—Ç: {group_id}"
            response += f"\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {data['responsible_id']}"
            if "task_id" in result:
                response += f"\nüìã ID –∑–∞–¥–∞—á–∏: {result['task_id']}"
        else:
            response = f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:</b>\n{result['error']}"
        
        await message.answer(response, parse_mode="HTML")
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID:")