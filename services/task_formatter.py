from datetime import datetime
from services.bitrix_client import bitrix_client

class TaskFormatter:
    def __init__(self):
        self.status_map = {
            "1": "üÜï –ù–æ–≤–∞—è",
            "2": "‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", 
            "3": "üöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
            "4": "üîÑ –û–∂–∏–¥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è",
            "5": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            "6": "‚ùå –û—Ç–ª–æ–∂–µ–Ω–∞",
            "7": "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞"
        }
        
        self.priority_map = {
            "0": "üü¢ –ù–∏–∑–∫–∏–π",
            "1": "üü° –°—Ä–µ–¥–Ω–∏–π",
            "2": "üî¥ –í—ã—Å–æ–∫–∏–π"
        }

    def _get_user_name(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        users = bitrix_client.get_users()
        for user in users:
            if str(user["ID"]) == str(user_id):
                return f"{user['NAME']} {user.get('LAST_NAME', '')}"
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"

    def _get_project_name(self, project_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID"""
        projects = bitrix_client.get_projects()
        for name, pid in projects.items():
            if str(pid) == str(project_id):
                return name
        return f"–ü—Ä–æ–µ–∫—Ç {project_id}"

    def _format_date(self, date_str):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É"""
        if not date_str:
            return ""
        try:
            date_obj = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
            return date_obj.strftime('%d.%m.%Y %H:%M')
        except:
            return date_str

    def format_task_info(self, task, detailed=False):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        if not task:
            return "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        task_id = task.get("id", "N/A")
        title = task.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        description = task.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
        status = self.status_map.get(str(task.get("status", "1")), "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        priority = self.priority_map.get(str(task.get("priority", "1")), "üü° –°—Ä–µ–¥–Ω–∏–π")
        responsible_id = task.get("responsibleId", "")
        created_date = task.get("createdDate", "")
        deadline = task.get("deadline", "")
        group_id = task.get("groupId", "")
        
        responsible_name = self._get_user_name(responsible_id)
        
        if detailed:
            response = f"üìã <b>–ó–∞–¥–∞—á–∞ #{task_id}</b>\n\n"
            response += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            response += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            response += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            response += f"<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority}\n"
            response += f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {responsible_name}\n"
            
            if created_date:
                response += f"<b>–°–æ–∑–¥–∞–Ω–∞:</b> {self._format_date(created_date)}\n"
            
            if deadline:
                response += f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {self._format_date(deadline)}\n"
            
            if group_id:
                project_name = self._get_project_name(group_id)
                response += f"<b>–ü—Ä–æ–µ–∫—Ç:</b> {project_name}\n"
        else:
            response = f"‚Ä¢ <b>#{task_id}</b> {title} - {status}\n"
            response += f"  üë§ {responsible_name}"
            
            if deadline:
                deadline_formatted = self._format_date(deadline)
                if deadline_formatted:
                    response += f" | üìÖ {deadline_formatted.split()[0]}"
        
        return response

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
task_formatter = TaskFormatter()